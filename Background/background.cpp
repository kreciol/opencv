//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;


// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat kernel;

Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void processVideo();

int main(int argc, char* argv[])
{

	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG 2");
	namedWindow("Diff");
	namedWindow("Background");
	//create Background Subtractor objects
	//pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
	pMOG2 = createBackgroundSubtractorKNN(); //MOG2 approach



		//input data coming from a sequence of images
	processVideo();

	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}
void processVideo() {
	//create the capture object
	VideoCapture capture;
	capture.open(0);
	capture.set(CV_CAP_PROP_FRAME_WIDTH, 1920);
	capture.set(CV_CAP_PROP_FRAME_HEIGHT, 1080);

	if (!capture.isOpened()) {
		//error in opening the video input
		cerr << "Unable to open camera " << endl;
		exit(EXIT_FAILURE);
	}

	Mat background, diff;

	for (int i = 0; i < 200; i++)
	{
		capture.read(background);
		imshow("Background", background);

	}


	//read input data. ESC or 'q' for quitting
	while ((char)keyboard != 'q' && (char)keyboard != 27) {
		//read the current frame
		if (!capture.read(frame)) {
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}

		///////
		absdiff(background, frame, diff);
		imshow("Diff", diff);


		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		stringstream ss;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		ss << capture.get(CAP_PROP_POS_FRAMES);
		string frameNumberString = ss.str();
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = waitKey(30);
	}
	//delete capture object
	capture.release();
}


